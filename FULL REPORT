A MINI PROJECT REPORT
ON
 Student’s Data Management System

Submitted to Mumbai University
In the partial fulfillment of the requirement for the award of the degree of

Bachelor of Engineering
In
COMPUTER ENGINEERING
By
Mr. Ansari Mohd Aamir
ROLL No. 17CO38
 
Under the guidance of
Mr. Muhammed Salman Shamsi
Assistant Professor



Department of Computer Engineering
Anjuman-I-Islam’s Kalsekar Technical Campus
Affiliated to Mumbai University
KHANDA GOAN, NEW PANVEL, NAVI MUMBAI, MAHARASHTRA 
2019-2020
Department of Computer Engineering
Anjuman-I-Islam’s Kalsekar Technical Campus
Affiliated to Mumbai University
KHANDA GOAN, NEW PANVEL, NAVI MUMBAI, MAHARASHTRA 
2019-2020





DECLARATION BY THE CANDIDATE

Ansari Mohd Aamir bearing Roll number: 17CO38, hereby declare that the mini project report entitled “Student’s Data  Management System”, is a record of bonafide work carried out by me and the results embodied in this project have not been reproduced or copied from any source. The results of this project report have not been submitted to any other University or Institute for the award of any other Degree or Diploma.


  Ansari Aamir
      ( 17CO38) 




Department of Computer Engineering
Anjuman-I-Islam’s Kalsekar Technical Campus
Affiliated to Mumbai University
KHANDA GOAN, NEW PANVEL, NAVI MUMBAI, MAHARASHTRA
2019-2020



CERTIFICATE

This is to certify that the project report entitled “Student’s Data Management System”, submitted by Mr. Ansari Aamir , bearing Roll. No.: 17CO38 in the partial fulfillment of the requirements for the award of the degree of Bachelor of Computer Engineering is a record of bonafide work carried out by him/her for the course Database & Information System Lab – CSL503.




          Course Owner
       
 (Prof. Muhammed Salman Shamsi)

		
INDEX
CONTENTS                                                                                             

CHAPTER 1: INTRODUCTION
1.1 Introduction………………………………………….….….…06
1.2 Scope ………………………...……………….…………..…..07
1.3 Problem Statement       ……..……….......................................08

CHAPTER 2 SYSTEM SPECIFICATION
             	  2.1 System Requirement    ……………..…………….…….………10

CHAPTER 3: SYSTEM DESIGN
             	  3.1 Relational Model     …………...………………………………. 12
		  3.2 Modules in the System       ………...………….………………. 13
		 
CHAPTER 4: IMPLEMENTATION
		  4.1 Code     ………...………..…..……….…….……………...........15
             	  4.2 Output / Screen Shots     …...……………………………..……36

CHAPTER 5: CONCLUSION
             	  5.1 Conclusion    ….…………………………………………….…..39

REFERENCES   …………………………………………………………………….40

















CHAPTER 1

INTRODUCTION







1.1 Introduction:
The project Student’s Data Management system includes registration of students, storing their details into the system. The software has the facility to give a unique id for every student and stores the details of every student and the department. It includes a students records to know the current record of each table. User can search department ,class and the details of a student using the id.
 The data can be retrieved easily. The interface is very user-friendly. The data are well protected for personal use and makes the data processing very fast.
Student’s Data Management System is powerful, flexible, and easy to use and is designed and developed to deliver real conceivable benefits to Student’s Datas.
Student’s Data Management System is designed for multi-speciality Student’s Datas, to cover a wide range of Student’s Data administration and management processes. It is an integrated end-to-end Student’s Data Management System that provides relevant information across the Student’s Data to support effective decision.
Student’s Data Management System is a software product suite designed to improve the quality and management of Student’s Data management.


1.3 Scope of the Project:
1) Information about students is done by just writing the students id ,name, department and class etc. Whenever the student comes up his information is stored freshly.
2) Department are generated by writing department id for each facility provided to student on a separate sheet.
3) Class information to students is generally recorded on class table, which contains class information of students. 

All this work is done manually by the receptionist and other operational staff and lot of papers are needed to be handled and taken care of. We have to remember various data available  and sometimes miss better alternatives as they can’t remember them at that time




1.3 Problem Statement
	The existing provides the basic functionalities needed to be handled in a Student’s Data management environment. There is no intelligence of the software in such cases. In the existing system all the student details  is maintained manually by the receptionist. Also there is no proper technique to check student information. It is very difficult to maintain all the Data, and records which maintains detail, of the Student’s Data by using this existing system. There are also many loopholes when we look at security of the system. These are the main disadvantage of the existing system that we are going to overcome in this project.

























CHAPTER 2

SYSTEM
REQUIRMENT









SYSTEM REQUIRMENTS:

2.1   HARDWARE REQUIREMENTS:
20 GB HDD
512 MB RAM
Pentium IV Processor /On words
Input Devices: Keyboard, Mouse
Output Devices: Monitor

2.1    SOFTWARE REQUIRMENTS : 
Database: Mysql 
Operating System :Windows  Xp On words / Linux/Mac os 
Programming Language Installed : Java (latest Version)
Drivers :Mysql-connector.jar





























CHAPTER 3

SYSTEM DESIGN






3.1 Relational Model






				Fig::Relational Model 






3.2 MODULES IN SYSTEM

The entire project mainly consist of only one Module which is Admin.
Admin Module
Manages data of students,Departments and class.
View student list
View Department list
View Class list

































CHAPTER 4

IMPLEMENTAION








4.1 CODE
//student.java
package jdbc;

public class student {

	
	public int student_id;
	public String f_name;
	public String l_name;
	public String dept_name;
	public String class_name;
	
	
	public int getStudent_id() {
		return student_id;
	}
	public void setStudent_id(int student_id) {
		this.student_id = student_id;
	}
	
	public String getF_name() {
		return f_name;
	}
	public void setF_name(String f_name) {
		this.f_name = f_name;
	}
	
	public String getL_name() {
		return l_name;
	}
	public void setL_name(String l_name) {
		this.l_name = l_name;
	}
	
	public String getDept_name() {
		return dept_name;
	}
	public void setDept_name(String dept_name) {
		this.dept_name = dept_name;
	}
	
	public String getClass_name() {
		return class_name;
	}
	public void setClass_name(String class_name) {
		this.class_name = class_name;
	}
}

//studentDemo.java
package jdbc;
import java.io.IOException;

import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Scanner;
import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
public  class studentDemo {
	 	Scanner sc = new Scanner(System.in);
	public static void main(String[] args) throws IOException {
		departmentDemo dd = new departmentDemo();
		ClassDemo c = new ClassDemo();
		
		
		// Object creation
		studentDemo sd = new studentDemo();
		
		Scanner sc = new Scanner(System.in);
		
		int ch,ch1,ch2,ch3,ch4;
		System.out.println("\t\tWELCOME TO STUDENT'S DATA MANAGEMENT SYSTEM:\n");

		do {

			System.out.println("Enter Your Choice :");
			System.out.println("1. Insert The Data :");
			System.out.println("2. Display The Records :");
			System.out.println("3. Update the records :");
			System.out.println("4. Delete The record :");
			System.out.println("5. Exit");
			
			ch = sc.nextInt();
			
			
			switch(ch) {
			case 1:	
				System.out.println("\n\n1::STUDENT\n2::DEPARTMENT\n3::CLASS \n\n::4BACK TO JDBC MENU");
						
				System.out.println("\nPLEASE ENTER YOUR CHOICE");
				ch1= sc.nextInt();

				switch (ch1){
				case 1: sd.insertData();
				break;
				
				case 2: dd.insertDeptData();

				break;
				
				case 3: c.insertClassData();
				break;
				
				case 4:
				break;
				
			    default:
				break;}
			break;
				
			case 2:
				
				System.out.println("\n\n1::STUDENT\n2::DEPARTMENT\n3::CLASS \n\n7::BACK TO JDBC MENU");
				
				System.out.println("\nPLEASE ENTER YOUR CHOICE");
				ch2= sc.nextInt();

				switch (ch2){
				case 1: sd.displayData();
				break;
				
				case 2: dd.displayDeptData();
				break;
				
				case 3: c.displayClassData();
				break;
				
				case 4:
					System.out.println("");
					break;

				
				
			        default:
					break;}
				
				break;
			case 3:
				System.out.println("\n\n1::STUDENT\n2::DEPARTMENT\n3::CLASS\n 4::BACK TO JDBC MENU");
				
				System.out.println("\nPLEASE ENTER YOUR CHOICE");
				ch3= sc.nextInt();

				switch (ch3){
				case 1: sd.updateData();
				break;
				
				case 2: dd.updateDeptData();
				break;
				
				case 3: c.updateClassData();
				break;
				
				case 4:
				break;
				
			    default:
				break;}
				
			break;
			case 4:
				System.out.println("\n\n1::STUDENT\n2::DEPARTMENT\n3::CLASS \n\n7::BACK TO JDBC MENU");
				
				System.out.println("\nPLEASE ENTER YOUR CHOICE");
				ch4= sc.nextInt();

				switch (ch4){
				case 1: sd.deleteData();
				break;
				
				case 2: dd.deleteDeptData();
				break;
				
				case 3: c.deleteClassData();
				break;
				
				case 4:
				break;
				
			    default:
				break;}
				
				
			break;
			case 5:
				System.out.println("Thank you for visiting us..!");
				break;
				
			 default:
				 break;
			}
			
		}while(ch!= 5);
		
	}
	
	public static Connection getConnect() throws SQLException {
		try {
		DriverManager.registerDriver(new com.mysql.jdbc.Driver());
		Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/student?useSSL=false","root","root");
		return con;
		
		}catch(Exception e){
			e.printStackTrace();
		}
		return null;
		
	}
	public void deleteData() {
		try {
			int id;
			System.out.println("Enter the record no. to delete :");
			id = sc.nextInt();
			student s = new student();
			s.setStudent_id(id);
		

			Connection con = getConnect();
			String query = "delete from student where student_id=?";
			
			PreparedStatement pst = (PreparedStatement) con.prepareStatement(query);
			pst.setInt(1, id);

			int x=pst.executeUpdate();
			if(x==1) {
				System.out.println("Record deleted.");
			}else {
				System.out.println("Record not found. ");
			}
			
		}catch(Exception e) {
			e.printStackTrace();
		}
	}
	public void updateData() {
		
		student s = new student();

		  System.out.println("Enter the student id / no :"); 
		  int i = sc.nextInt();
		  s.setStudent_id(i);
		  


		System.out.println("Enter the First name of Student :");
		String sfname = sc.next();
		s.setF_name(sfname);
		
		System.out.println("Enter the Last name of Student :");
		String slname = sc.next();
		s.setL_name(slname);
		
		System.out.println("Enter the DEPARTMENT of Student :");
		String sdept = sc.next();
		s.setDept_name(sdept);
		
		System.out.println("Enter the CLASS of Student :");
		String sclass = sc.next();
		s.setClass_name(sclass);
		
		
		try {

			Connection con = getConnect();
			String query = "update student set  f_name=?, l_name=?, dept_name=?, class_name=? where student_id=?";
			PreparedStatement pst = (PreparedStatement) con.prepareStatement(query);
			
			pst.setString(1, s.getF_name());
			pst.setString(2, s.getL_name());
			pst.setString(3, s.getDept_name());
			pst.setString(4, s.getClass_name());
			pst.setInt(5, s.getStudent_id());
			

			int x = pst.executeUpdate();
			pst.close();
			con.close();
			
			if(x==1) {
				System.out.println("Successfully updated ." );
			}else {
				System.out.println("Record not Found.");
			}
			
		}catch(Exception e) {
			e.printStackTrace();
		}
	}
	public void displayData() {
		try {
			Connection con = getConnect();
			String query = "select * from student";
			PreparedStatement pst = (PreparedStatement) con.prepareStatement(query);
			
			ResultSet rs = pst.executeQuery();

			System.out.println("STUDENT_ID\tFIRST _NAME\tLAST_NAME\tDEPARTMENT_NAME\t\tCLASS NAME");
			while(rs.next()) {
				System.out.println("   "+rs.getInt(1)+"\t\t "+rs.getString(2)+" \t\t"+rs.getString(3)+" \t\t "+rs.getString(4)+"\t  \t\t"+rs.getString(5));
				
			}rs.close();
			pst.close();
			con.close();
			
			
		}catch(Exception e) {
			e.printStackTrace();
		}
		
	}
	private void insertData() {
		// TODO Auto-generated method stub
		student s = new student();

		System.out.println("Enter Student id : ");
		int sid = sc.nextInt();
		s.setStudent_id(sid);

		System.out.println("Enter first name of Student : ");
		String fname = sc.next();
		s.setF_name(fname);
		
		System.out.println("Enter last name of Student : ");
		String lname = sc.next();
		s.setL_name(lname);
		
		System.out.println("Enter DEPARTMENT of student : ");
		String dept = sc.next();
		s.setDept_name(dept);
		
		System.out.println("Enter CLASS NAME of student : ");
		String clname = sc.next();
		s.setClass_name(clname);


		try {
			Connection con = getConnect();
			String query = "insert into student (student_id,f_name,l_name,dept_name,class_name)values(?,?,?,?,?)";
			PreparedStatement pst = (PreparedStatement) con.prepareStatement(query);
			pst.setInt(1, s.getStudent_id());
			pst.setString(2, s.getF_name());
			pst.setString(3, s.getL_name());
			pst.setString(4, s.getDept_name());
			pst.setString(5, s.getClass_name());

			int x = pst.executeUpdate();
			pst.close();
			con.close();

			if(x==1) {
				System.out.println("Record Inserted Successfully.");
			}else {
				System.out.println("Something Error while Inserting Record");
			}
			
		}catch(Exception e) {
			e.printStackTrace();
		}
	}
}
//dept.java
package jdbc;
public class dept {

	
		 public int dept_id;
		 public String dept_name;
		 public int student_id;
		 public String hod_name;

		 public int getDept_id() {
				return dept_id;
			}
			public void setDept_id(int dept_id) {
				this.dept_id = dept_id;
			}
			
			public String getDept_name1() {
				return dept_name;
			}
			public void setDept_name1(String dept_name) {
				this.dept_name = dept_name;
			}
			
			public int getStudent_id() {
				return student_id;
			}
			public void setStudent_id(int student_id) {
				this.student_id = student_id;
			}
			
			public String getHod_name() {
				return hod_name;
			}
			public void setHod_name(String hod_name) {
				this.hod_name = hod_name;
			}
			}

//deptDemo.java
package jdbc;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Scanner;
import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
public class departmentDemo {

	Scanner sc = new Scanner(System.in);
	
	public static Connection getConnect() throws SQLException {
		try {
		DriverManager.registerDriver(new com.mysql.jdbc.Driver());
		Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/student?useSSL=false","root","root");
		return con;
		
		}catch(Exception e){
			e.printStackTrace();
		}
		return null;
		
	}
	
	
	public void insertDeptData() {
		// TODO Auto-generated method stub
		dept d = new dept();

		System.out.println("Enter DEPARTMENT ID : ");
		int did = sc.nextInt();
		d.setDept_id(did);

		System.out.println("Enter DEPARTMENT NAME : ");
		String dname = sc.next();
		d.setDept_name1(dname);
		
		System.out.println("Enter the student id  :"); 
		  int i = sc.nextInt();
		  d.setStudent_id(i);
		
		System.out.println("Enter HOD NAME : ");
		String hodname = sc.next();
		d.setHod_name(hodname);
		
		try {
			Connection con = getConnect();
			String query = "insert into dept (dept_id,dept_name,student_id,hod_name)values(?,?,?,?)";
			PreparedStatement pst = (PreparedStatement) con.prepareStatement(query);
			pst.setInt(1, d.getDept_id());
			pst.setString(2, d.getDept_name1());
			pst.setInt(3, d.getStudent_id());
			pst.setString(4, d.getHod_name());

			int x = pst.executeUpdate();
			pst.close();
			con.close();

			if(x==1) {
				System.out.println("Record Inserted Successfully.");
			}else {
				System.out.println("Something Error while Inserting Record");
			}
			
		}catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	
public void updateDeptData() {
		
		dept d = new dept();

		  System.out.println("Enter the DEPT ID  no. :"); 
		  int i = sc.nextInt();
		  d.setDept_id(i);
		  


		System.out.println("Enter the DEPARTMENT NAME :");
		String dname = sc.next();
		d.setDept_name1(dname);
		
		
				
		System.out.println("Enter the student id  :"); 
		  int j = sc.nextInt();
		  d.setStudent_id(j);
		
		System.out.println("Enter HOD NAME : ");
		String hodname = sc.next();
		d.setHod_name(hodname);
		
		try {

			Connection con = getConnect();
			String query = "update dept set   dept_name=?, student_id=?, hod_name=? where dept_id=?";
			PreparedStatement pst = (PreparedStatement) con.prepareStatement(query);
			pst.setString(1, d.getDept_name1());
			pst.setInt(2, d.getStudent_id());
			pst.setString(3, d.getHod_name());
			pst.setInt(4, d.getDept_id());


			int x = pst.executeUpdate();
			pst.close();
			con.close();
			
			if(x==1) {
				System.out.println("Successfully updated ." );
			}else {
				System.out.println("Record not Found.");
			}
			
		}catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	public void displayDeptData() {
		try {
			Connection con = getConnect();
			String query = "select * from dept";
			PreparedStatement pst = (PreparedStatement) con.prepareStatement(query);
			
			ResultSet rs = pst.executeQuery();

			System.out.println("DEPARTMENT_ID\tDEPARTMENT _NAME\tSTUDENT_ID\tHOD_NAME");

			while(rs.next()) {

				System.out.println("\t"+rs.getInt(1)+"\t\t"+rs.getString(2)+"\t\t "+rs.getInt(3)+" \t\t"+rs.getString(4));
				
			}rs.close();
			pst.close();
			con.close();
			
			
		}catch(Exception e) {
			e.printStackTrace();
		}
		
	}
	
	
	
	public  void deleteDeptData() {
		try {
			int id;
			System.out.println("Enter the record no. to delete :");
			id = sc.nextInt();
			dept d = new dept();
			d.setDept_id(id);
		

			Connection con = getConnect();
			String query = "delete from dept where dept_id=?";
			
			PreparedStatement pst = (PreparedStatement) con.prepareStatement(query);
			pst.setInt(1, id);

			int x=pst.executeUpdate();
			if(x==1) {
				System.out.println("Record deleted.");
			}else {
				System.out.println("Record not found. ");
			}
			
		}catch(Exception e) {
			e.printStackTrace();
		}
	}

}

//Class.java
package jdbc;

public class Class {
	public int class_id;
	 public String class_name;
	 public int student_id;
	 public int no_students;
	 public String mentor_name;

	 public int getClass_id() {
			return class_id;
		}
		public void setClass_id(int class_id) {
			this.class_id = class_id;
		}
		
		public String getClass_name() {
			return class_name;
		}
		public void setClass_name(String class_name) {
			this.class_name = class_name;
		}
		
		public int getStudent_id() {
			return student_id;
		}
		public void setStudent_id(int student_id) {
			this.student_id = student_id;
		}
		
		public int getNo_students() {
			return no_students;
		}
		public void setNo_students(int no_students) {
			this.no_students = no_students;
		}
		
		public String getMentor_name() {
			return mentor_name;
		}
		public void setMentor_name(String mentor_name) {
			this.mentor_name = mentor_name;
		}
		}

//ClassDemo.java
package jdbc;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Scanner;
import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
public class ClassDemo {

	Scanner sc = new Scanner(System.in);
	
	public static Connection getConnect() throws SQLException {
		try {
		DriverManager.registerDriver(new com.mysql.jdbc.Driver());
		Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/student?useSSL=false","root","root");
		return con;
		
		}catch(Exception e){
			e.printStackTrace();
		}
		return null;
		
	}
	
	
	public void insertClassData() {
		// TODO Auto-generated method stub
		Class c = new Class();

		System.out.println("Enter CLASS ID : ");
		int cid = sc.nextInt();
		c.setClass_id(cid);

		System.out.println("Enter Class NAME : ");
		String cname = sc.next();
		c.setClass_name(cname);
		
		System.out.println("Enter the student id  :"); 
		  int i = sc.nextInt();
		  c.setStudent_id(i);
		  
		  System.out.println("Enter the no. students in class  :"); 
		  int j = sc.nextInt();
		  c.setNo_students(j);
		  
		System.out.println("Enter MENTOR NAME : ");
		String mname = sc.next();
		c.setMentor_name(mname);
		
		try {
			Connection con = getConnect();
			String query = "insert into class (class_id,class_name,student_id,no_students,mentor_name)values(?,?,?,?,?)";
			PreparedStatement pst = (PreparedStatement) con.prepareStatement(query);
			pst.setInt(1, c.getClass_id());
			pst.setString(2, c.getClass_name());
			pst.setInt(3, c.getStudent_id());
			pst.setInt(4, c.getNo_students());
			pst.setString(5, c.getMentor_name());

			int x = pst.executeUpdate();
			pst.close();
			con.close();

			if(x==1) {
				System.out.println("Record Inserted Successfully.");
			}else {
				System.out.println("Something Error while Inserting Record");
			}
			
		}catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	
public void updateClassData() {
		
		Class c = new Class();

		  System.out.println("Enter the CLASS ID  no. :"); 
		  int i = sc.nextInt();
		  c.setClass_id(i);
		  


		System.out.println("Enter the CLASS NAME :");
		String cname = sc.next();
		c.setClass_name(cname);
		
		
				
		System.out.println("Enter the student id  :"); 
		  int j = sc.nextInt();
		  c.setStudent_id(j);
		  
		  System.out.println("Enter the no. of students in class :"); 
		  int n = sc.nextInt();
		  c.setNo_students(n);
		
		System.out.println("Enter MENTOR NAME : ");
		String mname = sc.next();
		c.setMentor_name(mname);
		
		try {

			Connection con = getConnect();
			String query = "update class set   class_name=?, student_id=?, no_students=?, mentor_name=? where class_id=?";
			PreparedStatement pst = (PreparedStatement) con.prepareStatement(query);
			pst.setString(1, c.getClass_name());
			pst.setInt(2, c.getStudent_id());
			pst.setInt(3, c.getNo_students());
			pst.setString(4, c.getMentor_name());
			pst.setInt(5, c.getClass_id());


			int x = pst.executeUpdate();
			pst.close();
			con.close();
			
			if(x==1) {
				System.out.println("Successfully updated ." );
			}else {
				System.out.println("Record not Found.");
			}
			
		}catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	public void displayClassData() {
		try {
			Connection con = getConnect();
			String query = "select * from class";
			PreparedStatement pst = (PreparedStatement) con.prepareStatement(query);
			
			ResultSet rs = pst.executeQuery();

			System.out.println("CLASS_ID\tCLASS _NAME\tSTUDENT_ID\tNO. OF STUDENTS\t  MENTOR_NAME");

			while(rs.next()) {
				System.out.println(" "+rs.getInt(1)+" \t\t"+rs.getString(2)+"\t\t "+rs.getInt(3)+"\t\t   "+rs.getInt(4)+"\t\t  "+rs.getString(5));
				
			}rs.close();
			pst.close();
			con.close();
			
			
		}catch(Exception e) {
			e.printStackTrace();
		}
		
	}
	
	
	
	public  void deleteClassData() {
		try {
			int id;
			System.out.println("Enter the CLASS ID no. to delete :");
			id = sc.nextInt();
			Class c = new Class();
			c.setClass_id(id);
		

			Connection con = getConnect();
			String query = "delete from class where class_id=?";
			
			PreparedStatement pst = (PreparedStatement) con.prepareStatement(query);
			pst.setInt(1, id);

			int x=pst.executeUpdate();
			if(x==1) {
				System.out.println("Record deleted.");
			}else {
				System.out.println("Record not found. ");
			}
			
		}catch(Exception e) {
			e.printStackTrace();
		}
	}
}
4.2 OUTPUT

		WELCOME TO STUDENT'S DATA MANAGEMENT SYSTEM:

Enter Your Choice :
1. Insert The Data :
2. Display The Records :
3. Update the records :
4. Delete The record :
5. Exit
1


1::STUDENT
2::DEPARTMENT
3::CLASS 

4::BACK TO JDBC MENU

PLEASE ENTER YOUR CHOICE
1
Enter Student id : 
1
Enter first name of Student : 
Ammar
Enter last name of Student : 
Khan
Enter DEPARTMENT of student : 
Computer
Enter CLASS NAME of student : 
Teco
Record Inserted Successfully.
Enter Your Choice :
1. Insert The Data :
2. Display The Records :
3. Update the records :
4. Delete The record :
5. Exit
2


1::STUDENT
2::DEPARTMENT
3::CLASS 

7::BACK TO JDBC MENU

PLEASE ENTER YOUR CHOICE
1
STUDENT_ID	FIRST _NAME	LAST_NAME	DEPARTMENT_NAME		CLASS NAME
   1		 Ammar 		Khan 		 Computer	  		Teco
Enter Your Choice :
1. Insert The Data :
2. Display The Records :
3. Update the records :
4. Delete The record :
5. Exit
3


1::STUDENT
2::DEPARTMENT
3::CLASS
 4::BACK TO JDBC MENU

PLEASE ENTER YOUR CHOICE
1
Enter the student id / no :
1
Enter the First name of Student :
Aamir
Enter the Last name of Student :
Ansari
Enter the DEPARTMENT of Student :
IT
Enter the CLASS of Student :
BE
Successfully updated .
Enter Your Choice :
1. Insert The Data :
2. Display The Records :
3. Update the records :
4. Delete The record :
5. Exit
2


1::STUDENT
2::DEPARTMENT
3::CLASS 

7::BACK TO JDBC MENU

PLEASE ENTER YOUR CHOICE
1
STUDENT_ID	FIRST _NAME	LAST_NAME	DEPARTMENT_NAME		CLASS NAME
   1		 Aamir 		Ansari 		 IT	  		BE
Enter Your Choice :
1. Insert The Data :
2. Display The Records :
3. Update the records :
4. Delete The record :
5. Exit
4


1::STUDENT
2::DEPARTMENT
3::CLASS 

7::BACK TO JDBC MENU

PLEASE ENTER YOUR CHOICE
1
Enter the record no. to delete :
1
Record deleted.
Enter Your Choice :
1. Insert The Data :
2. Display The Records :
3. Update the records :
4. Delete The record :
5. Exit
2


1::STUDENT
2::DEPARTMENT
3::CLASS 

7::BACK TO JDBC MENU

PLEASE ENTER YOUR CHOICE
1
STUDENT_ID	FIRST _NAME	LAST_NAME	DEPARTMENT_NAME		CLASS NAME
Enter Your Choice :
1. Insert The Data :
2. Display The Records :
3. Update the records :
4. Delete The record :
5. Exit
5
Thank you for visiting us..!


























CHAPTER 5

CONCLUSION






5.1 CONCLUSION
The project is designed in such a way that future modification can be done so easily. The following conclusion can be deduced from the development of the project.

Automation of entire system improves the efficiency 
It gives the appropriate access to the authorized users depending on their permission
It effectively overcome the delay in communication
Updating of data information is so easy
System security, data security and reliability are the key features.
The system has adequate scope of modification in future if it necessary 
























REFERENCES
JAVA & Mysql

   Websites (Java)
[1] 
Oracle, "Techetwork," Oracle , [Online]. Available: https://www.oracle.com/technetwork/java/index.html.
[2] 
Oracle Foundation, "Java Documentation," Oracle, [Online]. Available: https://docs.oralce.com/en/java/index.htmls.
Books (Java)
[3] 
Y. D. Liang, Introduction to Java Programming. 
Website Mysql
[4] 
Mysql, "Mysql," Mysql, [Online]. Available: www.mysql.com.
[5] 
Mysql, "Reference Manual," Mysql, [Online]. Available: http://dev.mysql.com/doc/.
[6] 
Mysql, "Sql Statement Syntax," Mysql, [Online]. Available: http://dev.mysql.com/doc/refman/5.7/sql-syntax.html.
Books MySQL
[7] 
Paul DuBois, MySQL Devloper's Library, O'reilly, 2009. 
[8] 
R. Dyer, MySQL in a Nutshell, O'reilly, 2008. 


